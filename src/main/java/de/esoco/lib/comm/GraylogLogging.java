//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// This file is a part of the 'esoco-business' project.
// Copyright 2018 Elmar Sonnenschein, esoco GmbH, Flensburg, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
package de.esoco.lib.comm;

import de.esoco.entity.Entity;
import de.esoco.entity.EntityFunctions;

import de.esoco.lib.comm.GraylogEndpoint.SendGraylogMessage;
import de.esoco.lib.comm.GraylogMessage.Level;
import de.esoco.lib.logging.BusinessLogAspect;
import de.esoco.lib.logging.Log;
import de.esoco.lib.logging.LogLevel;
import de.esoco.lib.logging.LogRecord;

import java.util.Collection;
import java.util.Objects;


/********************************************************************
 * A logging implementation that sends log messages to a Graylog server. The
 * endpoint address of the Graylog server must be set on this instance with the
 * relation type {@link CommunicationRelationTypes#ENDPOINT_ADDRESS} before
 * invoking the {@link #initLogging()} method.
 *
 * @author eso
 */
public class GraylogLogging extends BusinessLogAspect<GraylogMessage>
{
	//~ Instance fields --------------------------------------------------------

	private Endpoint		   aGraylogEndpoint;
	private SendGraylogMessage fSendGraylogMessage;

	//~ Constructors -----------------------------------------------------------

	/***************************************
	 * Default constructor.
	 */
	public GraylogLogging()
	{
	}

	/***************************************
	 * Creates a new instance with a certain Graylog server endpoint address.
	 *
	 * @param sGraylogEndpointAddress The Graylog server address
	 */
	public GraylogLogging(String sGraylogEndpointAddress)
	{
		set(CommunicationRelationTypes.ENDPOINT_ADDRESS,
			Objects.requireNonNull(sGraylogEndpointAddress));
	}

	//~ Methods ----------------------------------------------------------------

	/***************************************
	 * Adds the endpoint address to the string representation generated by the
	 * superclass.
	 *
	 * @return The string representation for this instance
	 */
	@Override
	public String toString()
	{
		return String.format("%s(%s)",
							 super.toString(),
							 get(CommunicationRelationTypes.ENDPOINT_ADDRESS));
	}

	/***************************************
	 * {@inheritDoc}
	 */
	@Override
	@SuppressWarnings("boxing")
	protected GraylogMessage createLogObject(LogRecord rLogRecord)
	{
		LogLevel eLogLevel = rLogRecord.getLevel();

		Level eGraylogLevel;

		switch (eLogLevel)
		{
			case DEBUG:
				eGraylogLevel = Level.DEBUG;
				break;

			case ERROR:
				eGraylogLevel = Level.ERROR;
				break;

			case FATAL:
				eGraylogLevel = Level.EMERGENCY;
				break;

			case TRACE:
				eGraylogLevel = Level.NOTICE;
				break;

			case WARN:
				eGraylogLevel = Level.WARNING;
				break;

			default:
				eGraylogLevel = Level.INFORMATIONAL;
		}

		GraylogMessage aMessage =
			new GraylogMessage(eGraylogLevel, rLogRecord.getMessage(), null);

		aMessage.set(GraylogMessage.TIMESTAMP, rLogRecord.getTime());
		aMessage.set(GraylogMessage._FILE_NAME, rLogRecord.getSourceFileName());
		aMessage.set(GraylogMessage._LINE_NUMBER, rLogRecord.getLineNumber());

		Entity rLogSource = getLogSource();

		if (rLogSource != null)
		{
			aMessage.set(GraylogMessage._ORIGIN,
						 EntityFunctions.format(rLogSource));
		}

		if (eLogLevel.compareTo(get(MIN_STACK_LOG_LEVEL)) >= 0)
		{
			aMessage.set(GraylogMessage.FULL_MESSAGE,
						 Log.CAUSE_TRACE.evaluate(rLogRecord));
		}

		return aMessage;
	}

	/***************************************
	 * Creates the target endpoint from the endpoint address that must be stored
	 * in {@link CommunicationRelationTypes#ENDPOINT_ADDRESS}.
	 *
	 * @see BusinessLogAspect#init()
	 */
	@Override
	protected void init()
	{
		String sEndpointAddress =
			get(CommunicationRelationTypes.ENDPOINT_ADDRESS);

		Objects.requireNonNull(sEndpointAddress);

		aGraylogEndpoint    = Endpoint.at(sEndpointAddress);
		fSendGraylogMessage = GraylogEndpoint.sendMessage();
	}

	/***************************************
	 * {@inheritDoc}
	 */
	@Override
	protected void processLogObjects(Collection<GraylogMessage> rMessages)
	{
		try (Connection rConnection = aGraylogEndpoint.connect(this))
		{
			for (GraylogMessage rMessage : rMessages)
			{
				fSendGraylogMessage.sendTo(rConnection, rMessage);
			}
		}
	}
}
