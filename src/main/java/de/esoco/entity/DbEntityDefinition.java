//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// This file is a part of the 'esoco-business' project.
// Copyright 2015 Elmar Sonnenschein, esoco GmbH, Flensburg, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
package de.esoco.entity;

import de.esoco.lib.logging.Log;

import java.math.BigDecimal;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Timestamp;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import org.obrel.core.RelationType;
import org.obrel.core.RelationTypes;

import static de.esoco.storage.impl.jdbc.JdbcRelationTypes.SQL_NAME;

import static java.sql.Types.BIGINT;
import static java.sql.Types.BIT;
import static java.sql.Types.BOOLEAN;
import static java.sql.Types.CHAR;
import static java.sql.Types.DATE;
import static java.sql.Types.DECIMAL;
import static java.sql.Types.DOUBLE;
import static java.sql.Types.FLOAT;
import static java.sql.Types.INTEGER;
import static java.sql.Types.NUMERIC;
import static java.sql.Types.SMALLINT;
import static java.sql.Types.TIMESTAMP;
import static java.sql.Types.TINYINT;
import static java.sql.Types.VARCHAR;

import static org.obrel.type.MetaTypes.AUTOGENERATED;
import static org.obrel.type.MetaTypes.OBJECT_ID_ATTRIBUTE;

/**
 * Entity definition that reads the column names of a given database table and
 * sets these as attributes.
 *
 * @author thomas
 */
@SuppressWarnings({ "boxing" })
public class DbEntityDefinition extends EntityDefinition<Entity> {

	private static final long serialVersionUID = 1L;

	private static String sDefaultJdbcUrl;

	private static Properties aDefaultConnectionProperties;

	private static Map<Integer, Class<?>> aSqlDatatypeMap;

	static {
		aSqlDatatypeMap = new HashMap<Integer, Class<?>>();

		aSqlDatatypeMap.put(BIGINT, Long.class);
		aSqlDatatypeMap.put(INTEGER, Integer.class);
		aSqlDatatypeMap.put(SMALLINT, Short.class);
		aSqlDatatypeMap.put(TINYINT, Byte.class);
		aSqlDatatypeMap.put(DECIMAL, BigDecimal.class);
		aSqlDatatypeMap.put(NUMERIC, BigDecimal.class);
		aSqlDatatypeMap.put(FLOAT, Float.class);
		aSqlDatatypeMap.put(DOUBLE, Double.class);
		aSqlDatatypeMap.put(CHAR, String.class);
		aSqlDatatypeMap.put(VARCHAR, String.class);
		aSqlDatatypeMap.put(BOOLEAN, Boolean.class);
		aSqlDatatypeMap.put(BIT, Boolean.class);

		aSqlDatatypeMap.put(DATE, Date.class);
		aSqlDatatypeMap.put(TIMESTAMP, Timestamp.class);
	}

	/**
	 * Creates a new instance from a table in a particular database.
	 *
	 * @param sEntityName       The entity name
	 * @param sIdPrefix         The prefix for global entity IDs
	 * @param sTableName        rConnection The database connection
	 * @param sJdbcUrl          The database access URL; may be NULL for the
	 *                          default URL
	 * @param bAutogeneratedKey TRUE to mark primary key fields as
	 *                             automatically
	 *                          generated
	 */
	DbEntityDefinition(String sEntityName, String sIdPrefix, String sTableName,
		String sJdbcUrl, boolean bAutogeneratedKey) {
		init(sEntityName, sIdPrefix, Entity.class,
			readAttributes(sJdbcUrl, sTableName, bAutogeneratedKey));

		set(SQL_NAME, sTableName);
	}

	/**
	 * Internal method to close a closeable object.
	 *
	 * @param rCloseable The object to be closed
	 */
	private static void closeObject(Object rCloseable) {
		if (rCloseable != null) {
			try {
				if (rCloseable instanceof ResultSet) {
					((ResultSet) rCloseable).close();
				} else if (rCloseable instanceof Connection) {
					((Connection) rCloseable).close();
				}
			} catch (SQLException e) {
				Log.warn("Closing failed: " + rCloseable, e);
			}
		}
	}

	/**
	 * Creates a relation type for a certain database column.
	 *
	 * @param sColumn   The name of the database column
	 * @param sTable    The name of the database table
	 * @param nDatatype The SQL datatype of the database column
	 * @return A new relation type instance
	 */
	private static RelationType<?> createRelationType(String sColumn,
		String sTable, int nDatatype) {
		@SuppressWarnings("unchecked")
		Class<Object> rDatatype =
			(Class<Object>) aSqlDatatypeMap.get(nDatatype);

		if (rDatatype == null) {
			throw new IllegalArgumentException(
				"No datatype mapping for " + sColumn);
		}

		return RelationTypes.newRelationType(
			sTable.toLowerCase() + "." + sColumn.toUpperCase(), rDatatype);
	}

	/**
	 * Internal method to open a database connection for the argument JDBC URL.
	 *
	 * @param sJdbcUrl The JDBC URL; may be NULL for the default URL
	 * @return The new database connection
	 * @throws IllegalArgumentException If the connection could not be opened
	 */
	private static Connection openConnection(String sJdbcUrl) {
		String sUrl = (sJdbcUrl != null ? sJdbcUrl : sDefaultJdbcUrl);

		Connection aConnection;

		try {
			if (aDefaultConnectionProperties != null) {
				aConnection = DriverManager.getConnection(sUrl,
					aDefaultConnectionProperties);
			} else {
				aConnection = DriverManager.getConnection(sUrl);
			}
		} catch (SQLException e) {
			throw new IllegalArgumentException(
				"Could not open connection: " + sUrl);
		}

		return aConnection;
	}

	/**
	 * Creates the entity attributes from from the database metadata.
	 *
	 * @param sJdbcUrl          The JDBC URL for the database access
	 * @param sTableName        The name of the table to read the metadata for
	 * @param bAutogeneratedKey TRUE to indicate that the primary key is
	 *                          automatically generated by the database
	 * @return A new list containing the attribute relation types
	 */
	private static List<RelationType<?>> readAttributes(String sJdbcUrl,
		String sTableName, boolean bAutogeneratedKey) {
		List<RelationType<?>> aAttributes = new ArrayList<RelationType<?>>();
		Set<String> aPrimaryKeys = new HashSet<String>();
		Connection rConnection = openConnection(sJdbcUrl);
		ResultSet rResultSet = null;

		try {
			rResultSet = rConnection
				.getMetaData()
				.getPrimaryKeys(null, null, sTableName);

			while (rResultSet.next()) {
				aPrimaryKeys.add(rResultSet.getString("COLUMN_NAME"));
			}

			closeObject(rResultSet);

			rResultSet = rConnection
				.createStatement()
				.executeQuery("SELECT * FROM " + sTableName);

			ResultSetMetaData rMetaData = rResultSet.getMetaData();

			for (int i = 1; i <= rMetaData.getColumnCount(); i++) {
				String sColumn = rMetaData.getColumnLabel(i);
				int nDatatype = rMetaData.getColumnType(i);
				RelationType<?> aAttribute =
					createRelationType(sColumn, sTableName, nDatatype);

				if (aPrimaryKeys.contains(sColumn)) {
					aAttribute.set(OBJECT_ID_ATTRIBUTE, true);

					if (bAutogeneratedKey) {
						aAttribute.set(AUTOGENERATED, true);
					}
				}

				aAttributes.add(aAttribute);
			}
		} catch (SQLException e) {
			throw new IllegalArgumentException(
				"Could not read metadata for " + sTableName);
		} finally {
			closeObject(rResultSet);
			closeObject(rConnection);
		}

		return aAttributes;
	}

	/**
	 * Sets the global connection properties that will be used to create new
	 * entity definitions.
	 *
	 * @param rProperties The new global connection properties
	 */
	public static final void setDefaultConnectionProperties(
		Properties rProperties) {
		aDefaultConnectionProperties = new Properties();

		aDefaultConnectionProperties.putAll(rProperties);
	}

	/**
	 * Sets the default JDBC URL for the creation of database entity
	 * definitions.
	 *
	 * @param sJdbcUrl The new default JDBC URL
	 */
	public static final void setDefaultJdbcUrl(String sJdbcUrl) {
		sDefaultJdbcUrl = sJdbcUrl;
	}
}
